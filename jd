#!/usr/bin/env python3
import shutil
from glob import glob

from io import StringIO

import jotdown.globalv as globalv
from jotdown.parser import parse

import argparse
import os
import typing


def write_file(infile: str, outfile: str, fformat: str='html', **kwargs) -> None:
	with open(outfile, 'wb') as fout:
		doc = parse(i + '\n' for i in globalv.read_with_encoding(infile).split('\n'))
		doc.name = os.path.splitext(os.path.split(infile)[1])[0]

		fn = getattr(doc, 'emit_' + fformat)
		fout.write(bytes(fn(**kwargs), 'utf-8'))  # Output is hardcoded to utf-8

own_directory = os.path.dirname(os.path.abspath(__file__))

argparser = argparse.ArgumentParser()
argparser.add_argument('input')
argparser.add_argument('-o', '--output', default='out')
argparser.add_argument('-f', '--format', default='html')
argparser.add_argument('-s', '--style', default='solarized')
argparser.add_argument('-r', '--md-refs', dest='citations', action='store_false', default=True)
argparser.add_argument('-a', '--author', default=None)
args = argparser.parse_args()

style_ext = {
	'html': '.css',
	'rtf': '.rtf',
	'latex': '.tex',
	'debug': '',
	'jd': '',
}

# Use a built-in style file before attempting to load a custom one
builtin_stylesheet = os.path.join(own_directory, 'styles', args.style + style_ext[args.format])
if os.path.isfile(builtin_stylesheet):
	stylesheet = builtin_stylesheet
	stylesheet_enc = 'utf-8'
else:
	stylesheet = args.style
	stylesheet_enc = None

# Parse standalone files
if os.path.isfile(args.input):
	fout_name = args.output + '.' + args.format

	write_file(
		args.input, fout_name,
		fformat=args.format,
		ref_style=args.citations,
		stylesheet=stylesheet,
		stylesheet_enc=stylesheet_enc
	)

# Parse whole directories
elif os.path.isdir(args.input):
	if not os.path.exists(args.output):
		os.makedirs(args.output)
	if not os.path.isdir(args.output):
		raise Exception(args.output + ' exists but is not a directory')
	if os.path.realpath(args.output).startswith(os.path.realpath(args.input) + os.path.sep):
		print(os.path.realpath(args.output))
		print(os.path.realpath(args.input))
		raise Exception('Output path cannot be a subdirectory of the input folder')

	# Copy the css file over to the new folder
	stylesheet = shutil.copy(stylesheet, args.output)

	for in_dirpath, dirnames, filenames in os.walk(args.input):
		out_dirpath = os.path.join(args.output, os.path.relpath(in_dirpath, args.input))

		# Need to create the directories if they dont exist to avoid errors
		dirnames = list(dirnames)
		dirnames.append('.')
		for dname in dirnames:
			path = os.path.join(out_dirpath, dname)
			if not os.path.exists(path):
				os.makedirs(path)

		for in_fname in filenames:
			if os.path.splitext(in_fname)[1] == '.jd':
				out_fname = os.path.join(out_dirpath, globalv.ext_translation(in_fname, args.format))
				write_file(
					os.path.join(in_dirpath, in_fname),
					out_fname,
					fformat=args.format,
					ref_style=args.citations,
					stylesheet=os.path.relpath(stylesheet, out_dirpath),
					stylesheet_enc=stylesheet_enc,
					embed_css=False,
					link_translation=args.format,
					author=args.author,
				)
			else:
				shutil.copy(os.path.join(in_dirpath, in_fname), os.path.join(out_dirpath, in_fname))

	# Create index files for all folders. They may be overwritten by custom pages
	for out_dirpath, dirnames, filenames in os.walk(args.output):
		if not globalv.ext_translation('index.jd', args.format) in filenames:
			_, name = os.path.split(out_dirpath)
			index_file = ['#' + name]

			if dirnames:
				index_file.append('## Directories')
			for index_dir in dirnames:
				index_file.append('[' + index_dir + '](' +
					os.path.join(
						index_dir,
						globalv.ext_translation('index.jd', args.format)
					) + ')' + '\n'
				)

			if filenames:
				index_file.append('## Files')
			for index_filename in filenames:
				_, in_fname = os.path.split(index_filename)
				file_name, _ = os.path.splitext(in_fname)
				index_file.append('[' + file_name + '](' + in_fname + ')' + '\n')

			index_file = StringIO('\n\n'.join(index_file))
			index_doc = parse(index_file)
			index_doc.name = 'Index for ' + name

			with open(os.path.join(
					out_dirpath, globalv.ext_translation('index.jd', args.format)
			), 'wb') as fout:
				fn = getattr(index_doc, 'emit_' + args.format)
				fout.write(bytes(fn(
					stylesheet=os.path.relpath(stylesheet, out_dirpath),
					stylesheet_enc=stylesheet_enc,
					embed_css=False,
					link_translation=args.format,
					author=args.author,
				), 'utf-8'))
else:
	raise Exception(args.input + ' does not exist')


